import { z } from 'zod';

export const MessageSchema = {
  "ID": "2356550d-e59f-4a7c-9e5b-f55b6d312f05",
  "conversationID": "C2C@RBT#006",
  "conversationType": "C2C",
  "time": 1754536602,
  "sequence": 0,
  "clientSequence": 0,
  "random": 0,
  "priority": "Normal",
  "nick": "",
  "avatar": "avatar",
  "isPeerRead": false,
  "nameCard": "",
  "hasRiskContent": false,
  "isPlaceMessage": 0,
  "isRevoked": false,
  "from": "admin",
  "to": "@RBT#006",
  "flow": "",
  "isSystemMessage": false,
  "protocol": "JSON",
  "isResend": false,
  "isRead": true,
  "status": "success",
  "atUserList": [],
  "cloudCustomData": "",
  "isDeleted": false,
  "isModified": false,
  "clientTime": 1754536602,
  "senderTinyID": "",
  "needReadReceipt": false,
  "version": "0.8.4",
  "isBroadcastMessage": false,
  "isSupportExtension": false,
  "revoker": "",
  "revokeReason": "",
  "payload": {},
  "type": "TIMTextElem",
  "createdAt": 1754536602679,
  "updatedAt": 1754536602686
}

export const DB_MessageSchema = z.object({
  ID: z.string().uuid(),
  conversationID: z.string(),
  conversationType: z.enum(["C2C", "GROUP", "SYSTEM"]),
  time: z.number(),
  sequence: z.number().int().min(0),
  clientSequence: z.number().int().min(0),
  random: z.number().int(),
  priority: z.enum(["Low", "Normal", "High", "Urgent"]),
  nick: z.string(),
  avatar: z.string(),
  isPeerRead: z.boolean(),
  nameCard: z.string(),
  hasRiskContent: z.boolean(),
  isPlaceMessage: z.number().int(),
  isRevoked: z.boolean(),
  from: z.string(),
  to: z.string(),
  flow: z.string(),
  isSystemMessage: z.boolean(),
  protocol: z.enum(["JSON", "XML", "Binary"]),
  isResend: z.boolean(),
  isRead: z.boolean(),
  status: z.enum(["unSend", "fail", "success", "sending"]),
  atUserList: z.array(z.string()),
  cloudCustomData: z.string(),
  isDeleted: z.boolean(),
  isModified: z.boolean(),
  clientTime: z.number(),
  senderTinyID: z.string(),
  needReadReceipt: z.boolean(),
  version: z.string(),
  isBroadcastMessage: z.boolean(),
  isSupportExtension: z.boolean(),
  revoker: z.string(),
  revokeReason: z.string(),
  payload: z.record(z.any()),
  type: z.string(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
});

export type DB_Message = z.infer<typeof DB_MessageSchema>;
